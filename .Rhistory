View(palladium)
View(Paladium_Spot)
View(paladium_Future)
palladium_Future <- new_data[new_data$commodity == "Palladium", ]
palladium_Future
FuturosGold
fechas_futuras <- fechas <- seq.Date(from = "2023-11-01", by = "1 month", length.out = 24)
fechas_futuras <- fechas <- seq.Date(from = as.Date("2023-11-01"), by = "1 month", length.out = 24)
fechas_futuras
gold_proy_form <- bind_rows(FuturosGold,fechas_futuras)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
#Se exportan los datos
Precios_Futuros <- read_excel("Precios_Futuros.xlsx")
Gold_Spot <- read_excel("commodities-workbook.xlsx", sheet="Gold",
range = "A11:B678")
Silver_Spot <- read_excel("commodities-workbook.xlsx", sheet="Silver",
range = "A11:B681")
Copper_Spot <- read_excel("commodities-workbook.xlsx", sheet="Copper",
range = "A11:B537")
Platinum_Spot <- read_excel("precios spot platino.xlsx", range = "A1:H181")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B47")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B49")
Palladium_Spot
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
#Se filtran los datos de los futuros
new_data <- Precios_Futuros[c('commodity', 'date', 'close')]
new_data$date <- as.Date(new_data$date)
new_data <- new_data[new_data$date >= specific_date & new_data$date <= specific_date_end ,]
new_data <- na.omit(new_data %>% rename('Date' = 'date','Future' = 'close'))
#Se pasa el tipo de fecha de POSIXct a Date
Gold_Spot$Date <- as.Date(Gold_Spot$Date)
Silver_Spot$Date <- as.Date(Silver_Spot$Date)
Copper_Spot$Date <- as.Date(Copper_Spot$Date)
#Se filtra por fecha los precios spot a partir del "2022-12-31"
Gold_Spot <- Gold_Spot[Gold_Spot$Date >= specific_date & Gold_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'USD')
Silver_Spot <- Silver_Spot[Silver_Spot$Date >= specific_date & Silver_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Price')
Copper_Spot <- na.omit(Copper_Spot[Copper_Spot$Date >= specific_date & Copper_Spot$Date <= specific_date_end,]) %>% rename('Spot' = 'Price')
Palladium_Spot
palladium_Future <- read_excel("precios futuros paladio.xlsx", range = "A1:B49")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
#Se exportan los datos
Precios_Futuros <- read_excel("Precios_Futuros.xlsx")
Gold_Spot <- read_excel("commodities-workbook.xlsx", sheet="Gold",
range = "A11:B678")
Silver_Spot <- read_excel("commodities-workbook.xlsx", sheet="Silver",
range = "A11:B681")
Copper_Spot <- read_excel("commodities-workbook.xlsx", sheet="Copper",
range = "A11:B537")
Platinum_Spot <- read_excel("precios spot platino.xlsx", range = "A1:H181")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B47")
palladium_Future <- read_excel("precios futuros paladio.xlsx", range = "A1:B49")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
#Se filtran los datos de los futuros
new_data <- Precios_Futuros[c('commodity', 'date', 'close')]
new_data$date <- as.Date(new_data$date)
new_data <- new_data[new_data$date >= specific_date & new_data$date <= specific_date_end ,]
new_data <- na.omit(new_data %>% rename('Date' = 'date','Future' = 'close'))
#Se pasa el tipo de fecha de POSIXct a Date
Gold_Spot$Date <- as.Date(Gold_Spot$Date)
Silver_Spot$Date <- as.Date(Silver_Spot$Date)
Copper_Spot$Date <- as.Date(Copper_Spot$Date)
#Se filtra por fecha los precios spot a partir del "2022-12-31"
Gold_Spot <- Gold_Spot[Gold_Spot$Date >= specific_date & Gold_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'USD')
Silver_Spot <- Silver_Spot[Silver_Spot$Date >= specific_date & Silver_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Price')
Copper_Spot <- na.omit(Copper_Spot[Copper_Spot$Date >= specific_date & Copper_Spot$Date <= specific_date_end,]) %>% rename('Spot' = 'Price')
#Se separan los precios futuros por activo
gold_Future <- new_data[new_data$commodity == "Gold", ]
silver_Future <- new_data[new_data$commodity == "Silver", ]
copper_Future <- new_data[new_data$commodity == "Copper", ]
platinum_Future <- new_data[new_data$commodity == "Platinum", ]
palladium_Future
platinum_Future
palladium_Future
platinum_Future
palladium_Future$Fecha <- as.Date(palladium_Future$Fecha)
palladium_Future$Fecha
palladium_Future$Fecha <- as.Date(palladium_Future$Fecha, format = "%d.%m.%Y")
palladium_Future
platinum_Future
palladium_Future
palladium_Future <- palladium_Future %>% rename('Date' = 'Fecha','Future' = 'Último')
palladium_Future
palladium_Future_my <- palladium_Future %>%
mutate(year_month = format(Date, "%Y-%m"))
# Extraer el aÃÂÃÂ±o y mes de la fecha
gold_Future_my <- gold_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
silver_Future_my <- silver_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
copper_Future_my <- copper_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
platinum_Future_my <- platinum_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
palladium_Future_my <- palladium_Future %>%
mutate(year_month = format(Date, "%Y-%m"))
Gold_Spot_my <- Gold_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Silver_Spot_my <- Silver_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Copper_Spot_my <- Copper_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Platinum_Spot_my <- Platinum_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Palladium_Spot_my <- Platinum_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
# Filtrar la primera apariciÃÂÃÂ³n de cada mes
gold_Future_per_month <- gold_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
silver_Future_per_month <- silver_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
copper_Future_per_month <- copper_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month <- platinum_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
palladium_Future_per_month <- palladium_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Gold_Spot_per_month <- Gold_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Silver_Spot_per_month <- Silver_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Copper_Spot_per_month <- Copper_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month <- Platinum_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Palladium_Spot_per_month <- Palladium_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
#Se unen precios spot y futuros
gold <- merge(gold_Future_per_month, Gold_Spot_per_month, by = "Date", all = TRUE)
silver <- merge(silver_Future_per_month, Silver_Spot_per_month, by = "Date", all = TRUE)
copper <- merge(copper_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
platinum <- na.omit(merge(platinum_Future_per_month, Platinum_Spot_per_month, by = "Date", all = TRUE))
palladium <- na.omit(merge(palladium_Future_per_month, Palladium_Spot_per_month, by = "Date", all = TRUE))
#Se ponen las cosas como numeritos
gold$Future<-as.numeric(gold$Future)
silver$Future<-as.numeric(silver$Future)
copper$Future<-as.numeric(copper$Future)
platinum$Future<-as.numeric(platinum$Future)
palladium$Future<-as.numeric(palladium$Future)
platinum$Spot<-as.numeric(platinum$Spot)
palladium$Spot<-as.numeric(palladium$Spot)
#Todas las fechas se modifican al primero de cada mes
gold$Date <- as.Date(paste0(gold$Date, "-01"))
silver$Date <- as.Date(paste0(silver$Date, "-01"))
copper$Date <- as.Date(paste0(copper$Date, "-01"))
platinum$Date <- as.Date(paste0(platinum$Date, "-01"))
palladium$Date <- as.Date(paste0(platinum$Date, "-01"))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
palladium
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%M/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%M", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
#GrÃÂ¡fico Oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "goldenrod3")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
View(palladium)
Palladium_Spot_my
Platinum_Spot_my
Palladium_Spot_my <- Palladium_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Palladium_Spot_my
Platinum_Spot_my
Palladium_Spot$Date <- as.Date(Palladium_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
Palladium_Spot
palladium_Future
Palladium_Spot
Platinum_Spot
platinum_Future
palladium_Future
source("C:/Users/Usuario/Desktop/UCR/Valoración de instrumentos/Proyecto-Valoraci-n/Creacion de Df.R", echo=TRUE)
install.packages("dplyr")
# Extraer el aÃÂÃÂ±o y mes de la fecha
gold_Future_my <- gold_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
gold_Future_my
silver_Future_my
platinum_Future_my
palladium_Future_my
Gold_Spot_my
Silver_Spot_my
Copper_Spot_my
Platinum_Spot_my
Palladium_Spot_my
# Filtrar la primera apariciÃÂÃÂ³n de cada mes
gold_Future_per_month <- gold_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
silver_Future_per_month <- silver_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
copper_Future_per_month <- copper_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month <- platinum_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month
palladium_Future_per_month <- palladium_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
palladium_Future_per_month
Gold_Spot_per_month <- Gold_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Silver_Spot_per_month <- Silver_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Copper_Spot_per_month <- Copper_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month <- Platinum_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month
Platinum_Spot_my
Palladium_Spot_my
Palladium_Spot_per_month
#Se unen precios spot y futuros
gold <- merge(gold_Future_per_month, Gold_Spot_per_month, by = "Date", all = TRUE)
silver <- merge(silver_Future_per_month, Silver_Spot_per_month, by = "Date", all = TRUE)
copper <- merge(copper_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
platinum <- na.omit(merge(platinum_Future_per_month, Platinum_Spot_per_month, by = "Date", all = TRUE))
palladium <- na.omit(merge(palladium_Future_per_month, Palladium_Spot_per_month, by = "Date", all = TRUE))
palladium
#Se ponen las cosas como numeritos
gold$Future<-as.numeric(gold$Future)
silver$Future<-as.numeric(silver$Future)
copper$Future<-as.numeric(copper$Future)
platinum$Future<-as.numeric(platinum$Future)
palladium$Future<-as.numeric(palladium$Future)
platinum$Spot<-as.numeric(platinum$Spot)
palladium$Spot<-as.numeric(palladium$Spot)
#Todas las fechas se modifican al primero de cada mes
gold$Date <- as.Date(paste0(gold$Date, "-01"))
silver$Date <- as.Date(paste0(silver$Date, "-01"))
copper$Date <- as.Date(paste0(copper$Date, "-01"))
platinum$Date <- as.Date(paste0(platinum$Date, "-01"))
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 200)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
View(palladium)
