guides(color = guide_legend(title = NULL))
#GrÃ¡fico 4 del oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del Oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "#7FFFD4", "Precio Futuro" = "goldenrod")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(panel.background = element_rect(fill = "black"),  # Modifica el fondo del panel  #8B8B83
plot.background = element_rect(fill = "black"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "black", color = "goldenrod"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "goldenrod"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "goldenrod"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "goldenrod"),  # Modifica el color de las lÃ­neas de los ejes a blanco
plot.title = element_text(hjust = 0.5, color = "goldenrod", face = "bold"))+  # Ajustes del tÃ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico 5 del oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del Oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "#7FFFD4", "Precio Futuro" = "goldenrod")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃ­neas de los ejes a blanco
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "goldenrod3")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Plata
ggplot(silver, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot de la plata",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "#8B8989")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(silver$Future), by = 5)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Cobre
ggplot(copper, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del cobre",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "#D2691E")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(copper$Future), by = 10)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Platino
ggplot(platinum, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del platino",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(platinum$Future), by = 20)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
######
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
meses_proyectar<-24
#Sereies de Tiempo futuro
ST_gold_futuro <- ts(gold$Future, frequency = 12)
ST_gold_futuro <-as.numeric(ST_gold_futuro)
#series de tiempo spot
ST_gold_spot<-as.numeric(gold$Spot,frecuency=12)
#Arimas
ms_gold_futuro <- Arima(ST_gold_futuro, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 12))
ms_gold_spot <- Arima(ST_gold_spot, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 12))
#Proyyeciones
proyecciones_futuro_gold<- forecast(ms_gold_futuro, h = meses_proyectar)
proyecciones_spot_gold<- forecast(ms_gold_spot, h = meses_proyectar)
#print(proyecciones_futuro_gold)
#print(proyecciones_spot_gold)
#creacion del nuevo df
fechas <- seq(from = ym("2023-11"), by = "months", length.out = meses_proyectar)
fechas_formato <- as.Date(format(fechas, "%Y-%m-%d"))
gold_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
#Grafico de las proyecciones de Foward y spot
#Gold
gold_completo$Date <- as.Date(paste0(gold_completo$Date, "-01"), format = "%Y-%m-%d")
gold_completo$Periodo <- ifelse(gold_completo$Date > as.Date("2023-10-01"), "Proyeccion", "Datos")
ggplot(data = gold_completo) +
geom_line(aes(x = Date, y = Spot, group = 1, color = Periodo)) +
scale_color_manual(values = c("Datos" = "black", "Proyeccion" = "blue")) +
labs(x = "Fecha", y = "Valor del Spot", title = "Proyeccion de los Precios Spot a dos aÃ±os",
caption = "Fuente: Elaboracion propia con datos de ")
ggplot(data = gold_completo) +
geom_line(aes(x = Date, y = Future, group = 1, color = Periodo)) +
#geom_line(aes(x = Date, y = Spot, group = 1, color = periodoS)) +
scale_color_manual(values = c("Datos" = "black", "Proyeccion" = "blue")) +
labs(x = "Fecha", y = "Valor del Foward", title = "Proyeccion de los Precios Foward a dos aÃ±os",
caption = "Fuente: Elaboracion propia con datos de ")
##########################Copper
ST_copper_futuro <- ts(copper$Future, frequency = 12)
ms_copper_futuro <- auto.arima(ST_copper_futuro)
ST_copper_spot<-ts(copper$Spot,frequency=12)
ms_copper_spot<-arima(ST_copper_spot,c(0,0,6))
ms_copper_spot <- arima(ST_copper_spot,c(1,0,10))
proyecciones_futuro_copper<- forecast(ms_copper_futuro, h = meses_proyectar)
proyecciones_spot_copper<- forecast(ms_copper_spot, h = meses_proyectar)
plot(proyecciones_futuro_copper)
knitr::opts_chunk$set(echo = TRUE)
goldP<-head(gold,155-12)
ST_goldP_futuro <- ts(goldP$Future, frequency = 12)
ST_goldP_spot<-ts(goldP$Spot,frequency=12)
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
# Define the range for p, d, q
p <- 9
d <- 0:10
q <- 10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
results
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
ults <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0
results
#9,0,10 714.10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
results$AIC
results
# Define the range for p, d, q
p <- 0:10
d <- 0:4
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
701.2818 913
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
```
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0:4
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_gold_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_gold_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results1
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results1
#
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(0,2,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(0,2,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,1,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,1,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,0,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,0,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(2,0,0))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,0,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
#
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results1
results
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
#print(silver$Date)
#print(fechas_formato)
fechas <- seq(from = ym("2022-11"), by = "months", length.out = 12)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
Date
Future
as.Date(fechas_formato)
#print(silver$Date)
#print(fechas_formato)
fechas <- seq(from = ym("2022-11"), by = "months", length.out = 12)
as.Date(fechas_formatoP)
fechas_formatoP <- as.Date(format(fechas, "%Y-%m-%d"))
as.Date(fechas_formatoP)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
goldP_completo<-bind_rows(goldP,goldP_proyecciones)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
yecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
