<<<<<<< HEAD
View(palladium)
View(Paladium_Spot)
View(paladium_Future)
palladium_Future <- new_data[new_data$commodity == "Palladium", ]
palladium_Future
FuturosGold
fechas_futuras <- fechas <- seq.Date(from = "2023-11-01", by = "1 month", length.out = 24)
fechas_futuras <- fechas <- seq.Date(from = as.Date("2023-11-01"), by = "1 month", length.out = 24)
fechas_futuras
gold_proy_form <- bind_rows(FuturosGold,fechas_futuras)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
#Se exportan los datos
Precios_Futuros <- read_excel("Precios_Futuros.xlsx")
Gold_Spot <- read_excel("commodities-workbook.xlsx", sheet="Gold",
range = "A11:B678")
Silver_Spot <- read_excel("commodities-workbook.xlsx", sheet="Silver",
range = "A11:B681")
Copper_Spot <- read_excel("commodities-workbook.xlsx", sheet="Copper",
range = "A11:B537")
Platinum_Spot <- read_excel("precios spot platino.xlsx", range = "A1:H181")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B47")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B49")
Palladium_Spot
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
#Se filtran los datos de los futuros
new_data <- Precios_Futuros[c('commodity', 'date', 'close')]
new_data$date <- as.Date(new_data$date)
new_data <- new_data[new_data$date >= specific_date & new_data$date <= specific_date_end ,]
new_data <- na.omit(new_data %>% rename('Date' = 'date','Future' = 'close'))
#Se pasa el tipo de fecha de POSIXct a Date
Gold_Spot$Date <- as.Date(Gold_Spot$Date)
Silver_Spot$Date <- as.Date(Silver_Spot$Date)
Copper_Spot$Date <- as.Date(Copper_Spot$Date)
#Se filtra por fecha los precios spot a partir del "2022-12-31"
Gold_Spot <- Gold_Spot[Gold_Spot$Date >= specific_date & Gold_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'USD')
Silver_Spot <- Silver_Spot[Silver_Spot$Date >= specific_date & Silver_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Price')
Copper_Spot <- na.omit(Copper_Spot[Copper_Spot$Date >= specific_date & Copper_Spot$Date <= specific_date_end,]) %>% rename('Spot' = 'Price')
Palladium_Spot
palladium_Future <- read_excel("precios futuros paladio.xlsx", range = "A1:B49")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta direcciÃÂÃÂ³n como el nuevo working directory
setwd(script_directory)
#Se exportan los datos
Precios_Futuros <- read_excel("Precios_Futuros.xlsx")
Gold_Spot <- read_excel("commodities-workbook.xlsx", sheet="Gold",
range = "A11:B678")
Silver_Spot <- read_excel("commodities-workbook.xlsx", sheet="Silver",
range = "A11:B681")
Copper_Spot <- read_excel("commodities-workbook.xlsx", sheet="Copper",
range = "A11:B537")
Platinum_Spot <- read_excel("precios spot platino.xlsx", range = "A1:H181")
Palladium_Spot <- read_excel("precios spot paladio.xlsx", range = "A1:B47")
palladium_Future <- read_excel("precios futuros paladio.xlsx", range = "A1:B49")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino y paladio
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
#Se filtran los datos de los futuros
new_data <- Precios_Futuros[c('commodity', 'date', 'close')]
new_data$date <- as.Date(new_data$date)
new_data <- new_data[new_data$date >= specific_date & new_data$date <= specific_date_end ,]
new_data <- na.omit(new_data %>% rename('Date' = 'date','Future' = 'close'))
#Se pasa el tipo de fecha de POSIXct a Date
Gold_Spot$Date <- as.Date(Gold_Spot$Date)
Silver_Spot$Date <- as.Date(Silver_Spot$Date)
Copper_Spot$Date <- as.Date(Copper_Spot$Date)
#Se filtra por fecha los precios spot a partir del "2022-12-31"
Gold_Spot <- Gold_Spot[Gold_Spot$Date >= specific_date & Gold_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'USD')
Silver_Spot <- Silver_Spot[Silver_Spot$Date >= specific_date & Silver_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Price')
Copper_Spot <- na.omit(Copper_Spot[Copper_Spot$Date >= specific_date & Copper_Spot$Date <= specific_date_end,]) %>% rename('Spot' = 'Price')
#Se separan los precios futuros por activo
gold_Future <- new_data[new_data$commodity == "Gold", ]
silver_Future <- new_data[new_data$commodity == "Silver", ]
copper_Future <- new_data[new_data$commodity == "Copper", ]
platinum_Future <- new_data[new_data$commodity == "Platinum", ]
palladium_Future
platinum_Future
palladium_Future
platinum_Future
palladium_Future$Fecha <- as.Date(palladium_Future$Fecha)
palladium_Future$Fecha
palladium_Future$Fecha <- as.Date(palladium_Future$Fecha, format = "%d.%m.%Y")
palladium_Future
platinum_Future
palladium_Future
palladium_Future <- palladium_Future %>% rename('Date' = 'Fecha','Future' = 'Último')
palladium_Future
palladium_Future_my <- palladium_Future %>%
mutate(year_month = format(Date, "%Y-%m"))
# Extraer el aÃÂÃÂ±o y mes de la fecha
gold_Future_my <- gold_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
silver_Future_my <- silver_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
copper_Future_my <- copper_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
platinum_Future_my <- platinum_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
palladium_Future_my <- palladium_Future %>%
mutate(year_month = format(Date, "%Y-%m"))
Gold_Spot_my <- Gold_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Silver_Spot_my <- Silver_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Copper_Spot_my <- Copper_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Platinum_Spot_my <- Platinum_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Palladium_Spot_my <- Platinum_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
# Filtrar la primera apariciÃÂÃÂ³n de cada mes
gold_Future_per_month <- gold_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
silver_Future_per_month <- silver_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
copper_Future_per_month <- copper_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month <- platinum_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
palladium_Future_per_month <- palladium_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Gold_Spot_per_month <- Gold_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Silver_Spot_per_month <- Silver_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Copper_Spot_per_month <- Copper_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month <- Platinum_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Palladium_Spot_per_month <- Palladium_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
#Se unen precios spot y futuros
gold <- merge(gold_Future_per_month, Gold_Spot_per_month, by = "Date", all = TRUE)
silver <- merge(silver_Future_per_month, Silver_Spot_per_month, by = "Date", all = TRUE)
copper <- merge(copper_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
platinum <- na.omit(merge(platinum_Future_per_month, Platinum_Spot_per_month, by = "Date", all = TRUE))
palladium <- na.omit(merge(palladium_Future_per_month, Palladium_Spot_per_month, by = "Date", all = TRUE))
#Se ponen las cosas como numeritos
gold$Future<-as.numeric(gold$Future)
silver$Future<-as.numeric(silver$Future)
copper$Future<-as.numeric(copper$Future)
platinum$Future<-as.numeric(platinum$Future)
palladium$Future<-as.numeric(palladium$Future)
platinum$Spot<-as.numeric(platinum$Spot)
palladium$Spot<-as.numeric(palladium$Spot)
#Todas las fechas se modifican al primero de cada mes
gold$Date <- as.Date(paste0(gold$Date, "-01"))
silver$Date <- as.Date(paste0(silver$Date, "-01"))
copper$Date <- as.Date(paste0(copper$Date, "-01"))
platinum$Date <- as.Date(paste0(platinum$Date, "-01"))
palladium$Date <- as.Date(paste0(platinum$Date, "-01"))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
palladium
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%M/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%M", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
palladium
#GrÃÂ¡fico Oro
=======
guides(color = guide_legend(title = NULL))
#GrÃ¡fico 4 del oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del Oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "#7FFFD4", "Precio Futuro" = "goldenrod")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(panel.background = element_rect(fill = "black"),  # Modifica el fondo del panel  #8B8B83
plot.background = element_rect(fill = "black"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "black", color = "goldenrod"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "goldenrod"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "goldenrod"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "goldenrod"),  # Modifica el color de las lÃ­neas de los ejes a blanco
plot.title = element_text(hjust = 0.5, color = "goldenrod", face = "bold"))+  # Ajustes del tÃ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico 5 del oro
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del Oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "#7FFFD4", "Precio Futuro" = "goldenrod")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃ­neas de los ejes a blanco
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Oro
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
ggplot(gold, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del oro",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "goldenrod3")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(gold$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
<<<<<<< HEAD
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
=======
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Plata
ggplot(silver, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot de la plata",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "#8B8989")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(silver$Future), by = 5)) +
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
<<<<<<< HEAD
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
View(palladium)
Palladium_Spot_my
Platinum_Spot_my
Palladium_Spot_my <- Palladium_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Palladium_Spot_my
Platinum_Spot_my
Palladium_Spot$Date <- as.Date(Palladium_Spot$Date)
Palladium_Spot <- na.omit(Palladium_Spot[Palladium_Spot$Date >= specific_date & Palladium_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Close (troy oz)'))
Palladium_Spot
palladium_Future
Palladium_Spot
Platinum_Spot
platinum_Future
palladium_Future
source("C:/Users/Usuario/Desktop/UCR/Valoración de instrumentos/Proyecto-Valoraci-n/Creacion de Df.R", echo=TRUE)
install.packages("dplyr")
# Extraer el aÃÂÃÂ±o y mes de la fecha
gold_Future_my <- gold_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
gold_Future_my
silver_Future_my
platinum_Future_my
palladium_Future_my
Gold_Spot_my
Silver_Spot_my
Copper_Spot_my
Platinum_Spot_my
Palladium_Spot_my
# Filtrar la primera apariciÃÂÃÂ³n de cada mes
gold_Future_per_month <- gold_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
silver_Future_per_month <- silver_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
copper_Future_per_month <- copper_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month <- platinum_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month
palladium_Future_per_month <- palladium_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
palladium_Future_per_month
Gold_Spot_per_month <- Gold_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Silver_Spot_per_month <- Silver_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Copper_Spot_per_month <- Copper_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month <- Platinum_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Platinum_Spot_per_month
Platinum_Spot_my
Palladium_Spot_my
Palladium_Spot_per_month
#Se unen precios spot y futuros
gold <- merge(gold_Future_per_month, Gold_Spot_per_month, by = "Date", all = TRUE)
silver <- merge(silver_Future_per_month, Silver_Spot_per_month, by = "Date", all = TRUE)
copper <- merge(copper_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
platinum <- na.omit(merge(platinum_Future_per_month, Platinum_Spot_per_month, by = "Date", all = TRUE))
palladium <- na.omit(merge(palladium_Future_per_month, Palladium_Spot_per_month, by = "Date", all = TRUE))
palladium
#Se ponen las cosas como numeritos
gold$Future<-as.numeric(gold$Future)
silver$Future<-as.numeric(silver$Future)
copper$Future<-as.numeric(copper$Future)
platinum$Future<-as.numeric(platinum$Future)
palladium$Future<-as.numeric(palladium$Future)
platinum$Spot<-as.numeric(platinum$Spot)
palladium$Spot<-as.numeric(palladium$Spot)
#Todas las fechas se modifican al primero de cada mes
gold$Date <- as.Date(paste0(gold$Date, "-01"))
silver$Date <- as.Date(paste0(silver$Date, "-01"))
copper$Date <- as.Date(paste0(copper$Date, "-01"))
platinum$Date <- as.Date(paste0(platinum$Date, "-01"))
palladium$Date <- as.Date(paste0(palladium$Date, "-01"))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "1 month")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
=======
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Cobre
ggplot(copper, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del cobre",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "#D2691E")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(copper$Future), by = 10)) +
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
<<<<<<< HEAD
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
=======
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Platino
ggplot(platinum, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del platino",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(platinum$Future), by = 20)) +
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
<<<<<<< HEAD
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
=======
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃ¡fico Paladio
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 100)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
<<<<<<< HEAD
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
#GrÃÂ¡fico Paladio
ggplot(palladium, aes(x = Date)) +
geom_line(aes(y = Spot, color = "Precio Spot"), linewidth = 1) +
geom_line(aes(y = Future, color = "Precio Futuro"), linewidth = 1) +
labs(title = "Precio de Futuros y Spot del paladio",
x = "Fecha",
y = "Precio") +
scale_color_manual(values = c("Precio Spot" = "cadetblue2", "Precio Futuro" = "lightgrey")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
scale_y_continuous(breaks = seq(0, max(palladium$Future), by = 200)) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),   # Modifica el fondo del plot
legend.background = element_rect(fill = "white"),  # Modifica el fondo de la leyenda
legend.text = element_text(color = "black"),  # Modifica el color del texto de la leyenda a blanco
axis.text = element_text(color = "black"),  # Modifica el color de los valores de los ejes a blanco
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂÃÂ­tulo
guides(color = guide_legend(title = NULL))
View(palladium)
=======
axis.line = element_line(color = "black"),  # Modifica el color de las lÃÂ­neas de los ejes a blanco
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold"))+  # Ajustes del tÃÂ­tulo
guides(color = guide_legend(title = NULL))
######
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)
meses_proyectar<-24
#Sereies de Tiempo futuro
ST_gold_futuro <- ts(gold$Future, frequency = 12)
ST_gold_futuro <-as.numeric(ST_gold_futuro)
#series de tiempo spot
ST_gold_spot<-as.numeric(gold$Spot,frecuency=12)
#Arimas
ms_gold_futuro <- Arima(ST_gold_futuro, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 12))
ms_gold_spot <- Arima(ST_gold_spot, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 12))
#Proyyeciones
proyecciones_futuro_gold<- forecast(ms_gold_futuro, h = meses_proyectar)
proyecciones_spot_gold<- forecast(ms_gold_spot, h = meses_proyectar)
#print(proyecciones_futuro_gold)
#print(proyecciones_spot_gold)
#creacion del nuevo df
fechas <- seq(from = ym("2023-11"), by = "months", length.out = meses_proyectar)
fechas_formato <- as.Date(format(fechas, "%Y-%m-%d"))
gold_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
#Grafico de las proyecciones de Foward y spot
#Gold
gold_completo$Date <- as.Date(paste0(gold_completo$Date, "-01"), format = "%Y-%m-%d")
gold_completo$Periodo <- ifelse(gold_completo$Date > as.Date("2023-10-01"), "Proyeccion", "Datos")
ggplot(data = gold_completo) +
geom_line(aes(x = Date, y = Spot, group = 1, color = Periodo)) +
scale_color_manual(values = c("Datos" = "black", "Proyeccion" = "blue")) +
labs(x = "Fecha", y = "Valor del Spot", title = "Proyeccion de los Precios Spot a dos aÃ±os",
caption = "Fuente: Elaboracion propia con datos de ")
ggplot(data = gold_completo) +
geom_line(aes(x = Date, y = Future, group = 1, color = Periodo)) +
#geom_line(aes(x = Date, y = Spot, group = 1, color = periodoS)) +
scale_color_manual(values = c("Datos" = "black", "Proyeccion" = "blue")) +
labs(x = "Fecha", y = "Valor del Foward", title = "Proyeccion de los Precios Foward a dos aÃ±os",
caption = "Fuente: Elaboracion propia con datos de ")
##########################Copper
ST_copper_futuro <- ts(copper$Future, frequency = 12)
ms_copper_futuro <- auto.arima(ST_copper_futuro)
ST_copper_spot<-ts(copper$Spot,frequency=12)
ms_copper_spot<-arima(ST_copper_spot,c(0,0,6))
ms_copper_spot <- arima(ST_copper_spot,c(1,0,10))
proyecciones_futuro_copper<- forecast(ms_copper_futuro, h = meses_proyectar)
proyecciones_spot_copper<- forecast(ms_copper_spot, h = meses_proyectar)
plot(proyecciones_futuro_copper)
knitr::opts_chunk$set(echo = TRUE)
goldP<-head(gold,155-12)
ST_goldP_futuro <- ts(goldP$Future, frequency = 12)
ST_goldP_spot<-ts(goldP$Spot,frequency=12)
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
# Define the range for p, d, q
p <- 9
d <- 0:10
q <- 10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
results
#9,0,10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
# Define the range for p, d, q
p <- 5
d <- 0:10
q <- 2
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
ults <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0
results
#9,0,10 714.10
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,0,2
results
results$AIC
results
# Define the range for p, d, q
p <- 0:10
d <- 0:4
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results
701.2818 913
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_silver_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
```
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0:4
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_gold_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
#  701.2818(9,1,3)
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_gold_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results1
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
results1
#
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(0,2,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(0,2,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,1,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,1,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,2,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(1,0,1))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(2,0,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
ms_goldP_futuro<-arima(ST_goldP_futuro,order=c(2,0,0))
ms_goldP_spot <- arima(ST_goldP_spot,order=c(0,0,2))
proyecciones_futuro_goldP<- forecast(ms_goldP_futuro, h = 12)
proyecciones_spot_goldP<- forecast(ms_goldP_spot, h = 12)
plot(proyecciones_futuro_goldP)
plot(proyecciones_spot_goldP)
#print(silver$Date)
#print(fechas_formato)
goldP_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
adf_test <- adf.test(ST_goldP_futuro)
print(adf_test)
# Define the range for p, d, q
p <- 0:10
d <- 0
q <- 0:10
# Create a data frame with all combinations of p, d, q
pdq <- expand.grid(p = p, d = d, q = q)
# Apply the ARIMA model to each combination
results1 <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_spot, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})
#
results <- apply(pdq, 1, function(x) {
tryCatch({
model <- arima(ST_goldP_futuro, order = c(x['p'], x['d'], x['q']))
return(c(x, AIC = AIC(model)))
}, error = function(e) {
return(NULL)
})
})#5,1,2
results1
results
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
#print(silver$Date)
#print(fechas_formato)
fechas <- seq(from = ym("2022-11"), by = "months", length.out = 12)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formato),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
Date
Future
as.Date(fechas_formato)
#print(silver$Date)
#print(fechas_formato)
fechas <- seq(from = ym("2022-11"), by = "months", length.out = 12)
as.Date(fechas_formatoP)
fechas_formatoP <- as.Date(format(fechas, "%Y-%m-%d"))
as.Date(fechas_formatoP)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
goldP_completo<-bind_rows(goldP,goldP_proyecciones)
goldP_proyecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
yecciones<-data_frame(Date=as.Date(fechas_formatoP),
Future=proyecciones_futuro_goldP$mean,
Spot=proyecciones_spot_goldP$mean )
>>>>>>> 83fcfc968131145f5d45b14e1a7600b317e2c116
