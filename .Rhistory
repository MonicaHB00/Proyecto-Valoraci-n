matriz1[i,]<-rmultinom(1,matriz1[i-1,2],matriz_hombres[2,,min(20-19+i-2,80),1]) + matriz1[i,]
matriz1[i,]<-rmultinom(1,matriz1[i-1,3],matriz_hombres[3,,min(20-19+i-2,80),1]) + matriz1[i,]
matriz1[i,]<-rmultinom(1,matriz1[i-1,4],matriz_hombres[4,,min(20-19+i-2,80),1]) + matriz1[i,]
matriz1[i,]<-rmultinom(1,matriz1[i-1,5],matriz_hombres[5,,min(20-19+i-2,80),1]) + matriz1[i,]
matriz1[i,]<-rmultinom(1,matriz1[i-1,6],matriz_hombres[6,,min(20-19+i-2,80),1]) + matriz1[i,]
#print(i)
}
matrizota[,,k] <- matriz1
# Itera las edades y los guarda en la matriz final, llena matrices para cada una de las edades restantes.
for (j in 21:99) {
matriz2 <- matrix(0, ncol = 6, nrow = 100)
matriz2[1,] <- c(base$Hombres[j-19],0,0,0,0,0)
i=2
for (i in 2:100) {
matriz2[i,]<-rmultinom(1,matriz2[i-1,1],matriz_hombres[1,,min(j-19+i-2,80),1])
matriz2[i,]<-rmultinom(1,matriz2[i-1,2],matriz_hombres[2,,min(j-19+i-2,80),1]) + matriz2[i,]
matriz2[i,]<-rmultinom(1,matriz2[i-1,3],matriz_hombres[3,,min(j-19+i-2,80),1]) + matriz2[i,]
matriz2[i,]<-rmultinom(1,matriz2[i-1,4],matriz_hombres[4,,min(j-19+i-2,80),1]) + matriz2[i,]
matriz2[i,]<-rmultinom(1,matriz2[i-1,5],matriz_hombres[5,,min(j-19+i-2,80),1]) + matriz2[i,]
matriz2[i,]<-rmultinom(1,matriz2[i-1,6],matriz_hombres[6,,min(j-19+i-2,80),1]) + matriz2[i,]
}
matrizota[,,k] <-  matrizota[,,k] + matriz2  # suma las matrices
#print(j)
}
print(k)
}
end_time <- Sys.time()
end_time - start_time
View(t2)
###
#Roto las columnas para poder hacer el test de ANOVA para
#Cafe
datosaov_caf<-t2 %>%
pivot_longer(cols=c("Brasil","Costa Rica","Filipinas"),names_to = "Pais",values_to = "Produccion" )
#Se elimina las columnas inecesarias
datosaov_caf<-datosaov_caf%>%
select(quinquenio,Pais,Produccion)
# Paquetes para el documento:
library(tidyverse)
library(ggplot2)
library(readxl)
library(xtable)
library(cowplot)
#código para pasar tablas a .tex
# print(xtable(-), include.rownames = FALSE)
#data inicial (se cargan los datos totales)
data = read.csv('cultivos_global.csv')
#data incial
cultivos_global <- read_csv("GitHub/Proyecto_Estadistica/cultivos_global.csv")
data = cultivos_global
data_limpia = cultivos_global %>%
select(c('Área', 'Elemento', 'Producto', 'Año', 'Unidad', 'Valor'))
#seleccionamos las varibles relevantes.
data_limpia = data %>%
select(c('Área', 'Elemento', 'Producto', 'Año', 'Unidad', 'Valor')) %>%
mutate(Valor = Valor/10000)
# código para la tabla1
# filtramos los datos para obtener la produccion (prod) de bananos (ban) únicamente
prod_ban = data_limpia %>%
filter(Elemento == 'Producción' & Producto == 'Bananos')
# filtramos los paises, creamos los quinquenios y agrupamos por quinquenio (en ese orden)
prod_ban_gr = prod_ban %>%
filter(Área %in% c('Costa Rica', 'Colombia', 'Ecuador')) %>%
mutate(quinquenio = as.integer(cut(Año, breaks = seq(1960, 2025, by = 5)))) %>%
group_by(quinquenio, Área)
# creación de la tabla con los datos que queremos
tabla1 = summarise(prod_ban_gr, minimo=min(Valor, na.rm = TRUE),
promedio=mean(Valor), maximo=max(Valor, na.rm = TRUE),
sd=sd(Valor), median=quantile(Valor, 0.5),
q1=quantile(Valor, 0.25), q3=quantile(Valor, 0.75)
)
# cambiar el nombre de los quinquenios
quinq <- c('1960-1964', '1965-1969', '1970-1974', '1975-1979', '1980-1984',
'1985-1989', '1990-1994', '1995-1999', '2000-2004', '2005-2009',
'2010-2014', '2015-2019', '2020-2024')
tabla1$quinquenio <- quinq[match(tabla1$quinquenio, 1:13)]
#ordenar las variables de la tabla
tabla1 <- tabla1[with(tabla1, order(tabla1$Área)), c(2, 1, 3, 4, 5, 6, 7, 8, 9)]
#pasar la tabla a formado wide (no se llegó a utilizar pero lo conservo por si lo llegamos a necesitar)
tabla1_id_quin <- tabla1 %>% pivot_wider(id_cols = quinquenio, names_from = Área,
values_from = c(sd, promedio, maximo, minimo, q1, median, q3) )
# pasar la tabla a formado long (la que está en el anexo)
tabla1_id_area <- tabla1 %>%
tabla1_id_Área <- tabla1 %>%
pivot_longer(cols = c(sd, promedio, maximo, minimo, q1, median, q3),
names_to = 'Estadistico', values_to = 'Valor') %>%
pivot_wider(id_cols = c(Área, Estadistico), names_from = quinquenio, values_from = Valor)
# tabla de la bitacora 2 con el promedio
t1 <- prod_ban_gr %>%
summarise(promedio=mean(Valor))
#pasarla a wide
t1 <- t1 %>%
pivot_wider(id_cols = quinquenio, names_from = Área, values_from = promedio )
#renombra el quinquenio
t1$quinquenio <- quinq[match(t1$quinquenio, 1:13)]
# código para la tabla 2
# filtramos los datos para obtener la produccion (prod) de bananos (ban) únicamente
prod_pin = data_limpia %>%
filter(Elemento == 'Producción' & Producto == 'Piña tropical')
# filtramos los paises, creamos los quinquenios y agrupamos por quinquenio (en ese orden)
prod_pin_gr = prod_pin %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Filipinas')) %>%
mutate(quinquenio = as.integer(cut(Año, breaks = seq(1960, 2025, by = 5)))) %>%
group_by(quinquenio, Área)
# creación de la tabla con los datos que queremos
tabla2 = summarise(prod_pin_gr, minimo=min(Valor, na.rm = TRUE),
promedio=mean(Valor), maximo=max(Valor, na.rm = TRUE),
sd=sd(Valor), median=quantile(Valor, 0.5),
q1=quantile(Valor, 0.25), q3=quantile(Valor, 0.75)
)
# cambiar el nombre de los quinquenios
quinq <- c('1960-1964', '1965-1969', '1970-1974', '1975-1979', '1980-1984',
'1985-1989', '1990-1994', '1995-1999', '2000-2004', '2005-2009',
'2010-2014', '2015-2019', '2020-2024')
tabla2$quinquenio <- quinq[match(tabla2$quinquenio, 1:13)]
#ordenar las variables de la tabla
tabla2 <- tabla2[with(tabla2, order(tabla2$Área)), c(2, 1, 3, 4, 5, 6, 7, 8, 9)]
#pasar la tabla a formado wide (no se llegó a utilizar pero lo conservo por si lo llegamos a necesitar)
tabla2_id_quin <- tabla1 %>% pivot_wider(id_cols = quinquenio, names_from = Área,
values_from = c(sd, promedio, maximo, minimo, q1, median, q3) )
# pasar la tabla a formado long (la que está en el anexo)
tabla2_id_area <- tabla2 %>%
tabla2_id_Área <- tabla2 %>%
pivot_longer(cols = c(sd, promedio, maximo, minimo, q1, median, q3),
names_to = 'Estadistico', values_to = 'Valor') %>%
pivot_wider(id_cols = c(Área, Estadistico), names_from = quinquenio, values_from = Valor)
# tabla de la bitacora 2 con el promedio
t2 <- prod_pin_gr %>%
summarise(promedio=mean(Valor))
# pasarla a wide
t2 <- t2 %>%
pivot_wider(id_cols = quinquenio, names_from = Área, values_from = promedio )
# renombrar el quinquenio
t2$quinquenio <- quinq[match(t2$quinquenio, 1:13)]
# código para la tabla 2
# filtramos los datos para obtener la produccion (prod) de bananos (ban) únicamente
prod_caf = data_limpia %>%
filter(Elemento == 'Producción' & Producto == 'Café, verde')
# filtramos los paises, creamos los quinquenios y agrupamos por quinquenio (en ese orden)
prod_caf_gr = prod_caf %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Viet Nam')) %>%
mutate(quinquenio = as.integer(cut(Año, breaks = seq(1960, 2025, by = 5)))) %>%
group_by(quinquenio, Área)
# creación de la tabla con los datos que queremos
tabla3 = summarise(prod_caf_gr, minimo=min(Valor, na.rm = TRUE),
promedio=mean(Valor), maximo=max(Valor, na.rm = TRUE),
sd=sd(Valor), median=quantile(Valor, 0.5),
q1=quantile(Valor, 0.25), q3=quantile(Valor, 0.75)
)
# cambiar el nombre de los quinquenios
quinq <- c('1960-1964', '1965-1969', '1970-1974', '1975-1979', '1980-1984',
'1985-1989', '1990-1994', '1995-1999', '2000-2004', '2005-2009',
'2010-2014', '2015-2019', '2020-2024')
tabla3$quinquenio <- quinq[match(tabla3$quinquenio, 1:13)]
#ordenar las variables de la tabla
tabla3 <- tabla3[with(tabla3, order(tabla3$Área)), c(2, 1, 3, 4, 5, 6, 7, 8, 9)]
#pasar la tabla a formado wide (no se llegó a utilizar pero lo conservo por si lo llegamos a necesitar)
tabla3_id_quin <- tabla3 %>% pivot_wider(id_cols = quinquenio, names_from = Área,
values_from = c(sd, promedio, maximo, minimo, q1, median, q3) )
# pasar la tabla a formado long (la que está en el anexo)
tabla3_id_Área <- tabla3 %>%
pivot_longer(cols = c(sd, promedio, maximo, minimo, q1, median, q3),
names_to = 'Estadistico', values_to = 'Valor') %>%
pivot_wider(id_cols = c(Área, Estadistico), names_from = quinquenio, values_from = Valor)
# tabla de la bitacora 2 con el promedio
t3 <- prod_caf_gr %>%
summarise(promedio=mean(Valor))
# pasarla a wide
t3 <- t3 %>%
pivot_wider(id_cols = quinquenio, names_from = Área, values_from = promedio )
#renombrar el quinquenio
t3$quinquenio <- quinq[match(t3$quinquenio, 1:13)]
# para evitar la notación científica.
options(scipen= 999)
#Dimensiones para todos los gráficos
h<-5
w<-h*1.6
# plot 1
prod_ban_pai <- prod_ban %>%
filter(Área %in% c('Costa Rica', 'Colombia', 'Ecuador'))
ggplot(prod_ban_pai, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_boxplot() +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "BoxPlot.pdf", width = w, height = h, plot = last_plot())
prod_Área_caf = data_limpia %>%
filter(Elemento %in% c('Área cosechada', 'Producción') & Producto == 'Café, verde')
pr_ar_caf_pai <- prod_Área_caf %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Viet Nam')) %>%
select(Área, Elemento, Valor, Año)
pr_ar_caf_pai <- pr_ar_caf_pai %>% pivot_wider(id_cols = c(Área, Año), names_from = Elemento, values_from = Valor)
ggplot(pr_ar_caf_pai, mapping = aes(x=Año, y=Producción, color=Área)) +
geom_line(linewidth=1) +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "LinePlot.pdf", width = w, height = h, plot = last_plot())
Área_pin = data_limpia %>%
filter(Elemento %in% c('Área cosechada') & Producto == 'Piña tropical') %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Filipinas'))
ggplot(area_pin, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_point(size=1.5) +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "PointPlot.pdf", width = w, height = h, plot = last_plot())
## ANTEPROYECTO
# plots
options(scipen= 999)
#Dimensiones para todos los gráficos
h<-5
w<-h*1.6
# plot 1
prod_ban_pai <- prod_ban %>%
filter(Área %in% c('Costa Rica', 'Colombia', 'Ecuador'))
ggplot(prod_ban_pai, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_boxplot() +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "BoxPlotBan.pdf", width = w, height = h, plot = last_plot())
# plot 2
prod_pin_pai <- prod_pin %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Filipinas'))
ggplot(prod_pin_pai, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_boxplot() +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "BoxPlotPin.pdf", width = w, height = h, plot = last_plot())
# plot 3
prod_caf_pai <- prod_caf %>%
filter(Área %in% c('Costa Rica', 'Brasil', 'Viet Nam'))
ggplot(prod_caf_pai, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_boxplot() +
labs(x = "País",
y = "Producción",
title=" ",
color = 'País')+
theme_cowplot(12)
ggsave(filename = "BoxPlotCaf.pdf", width = w, height = h, plot = last_plot())
ggplot(Área_pin, mapping = aes(x=Área, y=Valor, color=Área)) +
geom_point() +
theme_cowplot(12)
paises_ban<-c("Colombia","Costa Rica","Ecuador")
datosaov_ban<-t1 %>%
pivot_longer(cols=paises_ban,names_to = "Pais",values_to = "Produccion" )
#Se eliminan las columnas inecesarias
datosaov_ban<-datosaov_ban%>%
select(quinquenio,Pais,Produccion)
#Se aplica la funcion de R aov que aplica el metodo ANOVA
modelo_anovaBan<-aov(Produccion ~ Pais, data = datosaov_ban)
#Imprime un resumen de los resultaos del metodo ANOVA
print(summary(modelo_anovaBan))
###
#Roto las columnas para poder hacer el test de ANOVA para
#Cafe
datosaov_caf<-t2 %>%
pivot_longer(cols=c("Brasil","Costa Rica","Filipinas"),names_to = "Pais",values_to = "Produccion" )
#Se elimina las columnas inecesarias
datosaov_caf<-datosaov_caf%>%
select(quinquenio,Pais,Produccion)
#Se aplica la funcion de R aov que aplica el metodo ANOVA
modelo_anovaCaf<-aov(Produccion ~ Pais, data = datosaov_caf)
#Se imprime un resumen de los resultaos del metodo ANOVA
print(summary(modelo_anovaCaf))
###
#Se rotan las columnas para poder hacer el tes de ANOVA para
#PiñaTropical
datosaov_pin<-t3 %>%
pivot_longer(cols=c("Brasil","Costa Rica","Viet Nam"),names_to = "Pais",values_to = "Produccion" )
#Se eliminan las columnas inecesarias
datosaov_pin<-datosaov_pin%>%
select(quinquenio,Pais,Produccion)
#Modelo ANOVA
# Realizar la prueba ANOVA
modelo_anovaPin <- aov(Produccion ~ Pais, data = datosaov_pin)
#Imprime un resumen de los resultaos del metodo ANOVA
resumen_anovaPin <- summary(modelo_anovaPin)
print(resumen_anovaPin)
#Se va a comparar comparar cada uno de los productores de bananno selecionados
#Se entiendo que el t-test solo compara dos bases de datos
#Se inicia compararando las base de datos de Colombia y Costa Rica
res1_ban<-t.test(t1[["Colombia"]],t1[["Costa Rica"]])
#Colombia y Ecuador
res2_ban<-t.test(t1[["Colombia"]],t1[["Ecuador"]])
#Se aplica la funcion de R aov que aplica el metodo ANOVA
modelo_anovaCaf<-aov(Produccion ~ Pais, data = datosaov_caf)
#Se imprime un resumen de los resultaos del metodo ANOVA
print(summary(modelo_anovaCaf))
###
#Se rotan las columnas para poder hacer el tes de ANOVA para
#PiñaTropical
datosaov_pin<-t3 %>%
pivot_longer(cols=c("Brasil","Costa Rica","Viet Nam"),names_to = "Pais",values_to = "Produccion" )
#Se eliminan las columnas inecesarias
datosaov_pin<-datosaov_pin%>%
select(quinquenio,Pais,Produccion)
#Modelo ANOVA
# Realizar la prueba ANOVA
modelo_anovaPin <- aov(Produccion ~ Pais, data = datosaov_pin)
#Imprime un resumen de los resultaos del metodo ANOVA
resumen_anovaPin <- summary(modelo_anovaPin)
print(resumen_anovaPin)
library(readxl)
Precios_Futuros <- read_excel("GitHub/Proyecto-Valoraci-n/Precios_Futuros.xlsx")
View(Precios_Futuros)
library(dplyr)
library(lubridate)
library(readxl)
getwd()
# Para encontrar donde esta guardado este archivo
script_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
script_directory
# Se toma esta dirección como el nuevo working directory
setwd(script_directory)
#Se exportan los datos
Precios_Futuros <- read_excel("Precios Futuros.xlsx")
Gold_Spot <- read_excel("commodities-workbook.xlsx", sheet="Gold",
range = "A11:B678")
Silver_Spot <- read_excel("commodities-workbook.xlsx", sheet="Silver",
range = "A11:B681")
Copper_Spot <- read_excel("commodities-workbook.xlsx", sheet="Copper",
range = "A11:B537")
Platinum_Spot <- read_excel("precios spot platino.xlsx", range = "A1:H181")
risk_free <- read_excel("tasa libre de riesgo.xlsx")
#Fecha inicial para los datos
specific_date <- as.Date("2010-12-01")
specific_date_end <- as.Date("2023-10-31")
#Se filtra la tabla de precios spot para platino
Platinum_Spot <- Platinum_Spot[, !(colSums(is.na(Platinum_Spot)) > 0)]
Platinum_Spot <- Platinum_Spot[c('Date', 'Close (troy oz)')] %>% rename('Spot' = 'Close (troy oz)')
Platinum_Spot$Date <- as.Date(Platinum_Spot$Date)
#Se filtran los datos de los futuros
new_data <- Precios_Futuros[c('commodity', 'date', 'close')]
new_data$date <- as.Date(new_data$date)
new_data <- new_data[new_data$date >= specific_date & new_data$date <= specific_date_end ,]
new_data <- na.omit(new_data %>% rename('Date' = 'date','Future' = 'close'))
#Se pasa el tipo de fecha de POSIXct a Date
Gold_Spot$Date <- as.Date(Gold_Spot$Date)
Silver_Spot$Date <- as.Date(Silver_Spot$Date)
Copper_Spot$Date <- as.Date(Copper_Spot$Date)
#Se filtra por fecha los precios spot a partir del "2022-12-31"
Gold_Spot <- Gold_Spot[Gold_Spot$Date >= specific_date & Gold_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'USD')
Silver_Spot <- Silver_Spot[Silver_Spot$Date >= specific_date & Silver_Spot$Date <= specific_date_end,] %>% rename('Spot' = 'Price')
Copper_Spot <- na.omit(Copper_Spot[Copper_Spot$Date >= specific_date & Copper_Spot$Date <= specific_date_end,]) %>% rename('Spot' = 'Price')
#Se separan los precios futuros por activo
gold_Future <- new_data[new_data$commodity == "Gold", ]
silver_Future <- new_data[new_data$commodity == "Silver", ]
copper_Future <- new_data[new_data$commodity == "Copper", ]
platinum_Future <- new_data[new_data$commodity == "Platinum", ]
# Extraer el año y mes de la fecha
gold_Future_my <- gold_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
silver_Future_my <- silver_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
copper_Future_my <- copper_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
platinum_Future_my <- platinum_Future %>%
mutate(year_month = format(Date, "%Y-%m"))%>% select(-commodity)
Gold_Spot_my <- Gold_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Silver_Spot_my <- Silver_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Copper_Spot_my <- Copper_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
Platinum_Spot_my <- Platinum_Spot %>%
mutate(year_month = format(Date, "%Y-%m"))
# Filtrar la primera aparición de cada mes
gold_Future_per_month <- gold_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
silver_Future_per_month <- silver_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
copper_Future_per_month <- copper_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
platinum_Future_per_month <- platinum_Future_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Gold_Spot_per_month <- Gold_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Silver_Spot_per_month <- Silver_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
Copper_Spot_per_month <- Copper_Spot_my %>% group_by(year_month) %>% slice_min(Date) %>% select(-Date) %>% rename('Date' = 'year_month')
#Se unen precios spot y futuros
gold <- merge(gold_Future_per_month, Gold_Spot_per_month, by = "Date", all = TRUE)
silver <- merge(silver_Future_per_month, Silver_Spot_per_month, by = "Date", all = TRUE)
copper <- merge(copper_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
platinum <- merge(platinum_Future_per_month, Copper_Spot_per_month, by = "Date", all = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
serie_temporal <- ts(gold$Future, frequency = 155)
serie_temporal <-as.numeric(serie_temporal)
modelo_arima <- auto.arima(serie_temporal)
proyecciones <- forecast(modelo_arima, h = 24)
print(proyecciones)
plot(proyecciones, main = "Proyección de Precios Forward", xlab = "Fecha", ylab = "Precio Forward")
lines(serie_temporal, col = "blue")
modelo_sarima <- Arima(serie_temporal, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 12))
print(modelo_sarima)
proyecciones_sarima <- forecast(modelo_sarima, h = 24)
print(proyecciones_sarima)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_sarima, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(serie_temporal, col = "blue")
modelo_sarima <- Arima(serie_temporal, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 4))
print(modelo_sarima)
proyecciones_sarima <- forecast(modelo_sarima, h = 24)
print(proyecciones_sarima)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_sarima, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(serie_temporal, col = "blue")
modelo_sarima <- Arima(serie_temporal, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 24))
print(modelo_sarima)
proyecciones_sarima <- forecast(modelo_sarima, h = 24)
print(proyecciones_sarima)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_sarima, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(serie_temporal, col = "blue")
modelo_sarima <- Arima(serie_temporal, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 24))
print(modelo_sarima)
proyecciones_sarima <- forecast(modelo_sarima, h = 24)
print(proyecciones_sarima)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_sarima, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(serie_temporal, col = "black")
ST_gold_spot<-as.numeric(gold$Spot,frecuency=155)
ms_gold_spot <- Arima(ST_gold_spot, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 24))
proyecciones_futuro_gold<- forecast(ms_gold_futuro, h = 24)
proyecciones_spot_gold<- forecast(ms_gold_spot, h = 24)
print(proyecciones_spot_gold)
lines(proyecciones_spot_gold$mean, col = "red")
legend("topright", legend = c("Precio Forward", "Precio Spot"), col = c("blue", "red"), lty = 1)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_futuro_gold, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(ST_gold_futuro, col = "black")
lines(proyecciones_spot_gold$mean, col = "red")
legend("topright", legend = c("Precio Forward", "Precio Spot"), col = c("blue", "red"), lty = 1)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(proyecciones_futuro_gold, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(ST_gold_futuro, col = "black")
lines(proyecciones_spot_gold$mean, col = "red")
lines(ST_gold_futuro, col = "black")
lines(ST_gold_spot, col = "red")
#par(mar = c(5, 4, 4, 2) + 0.1)
#plot(proyecciones_futuro_gold, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(ST_gold_futuro, col = "black")
lines(ST_gold_spot, col = "red")
#par(mar = c(5, 4, 4, 2) + 0.1)
#plot(proyecciones_futuro_gold, main = "Proyección de Precios Forward con SARIMA", xlab = "Fecha", ylab = "Precio Forward")
lines(ST_gold_futuro, col = "black")
lines(ST_gold_spot, col = "red")
proyecciones_spot_gold
proyecciones_spot_gold$mean
library(lubridate)
gold_proyecciones<-data_frame(fecha = seq(from = ym("2023-11"), by = "months", length.out = 24),
proyecciones_futuro_gold$mean,
proyecciones_spot_gold$mean )
exists("proyecciones_futuro_gold")
proyecciones_futuro_gold<- forecast(ms_gold_futuro, h = 24)
ST_gold_futuro <- ts(gold$Future, frequency = 155)
ST_gold_futuro <-as.numeric(ST_gold_futuro)
ST_gold_spot<-as.numeric(gold$Spot,frecuency=155)
ms_gold_futuro <- Arima(ST_gold_futuro, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 24))
ms_gold_spot <- Arima(ST_gold_spot, order = c(1, 1, 1),
seasonal = list(order = c(1, 1, 1), period = 24))
proyecciones_futuro_gold<- forecast(ms_gold_futuro, h = 24)
proyecciones_spot_gold<- forecast(ms_gold_spot, h = 24)
print(proyecciones_futuro_gold)
print(proyecciones_spot_gold)
gold_proyecciones<-data_frame(fecha = seq(from = ym("2023-11"), by = "months", length.out = 24),
proyecciones_futuro_gold$mean,
proyecciones_spot_gold$mean )
View(gold_proyecciones)
gold_proyecciones<-data_frame(Date = seq(from = ym("2023-11"), by = "months", length.out = 24),
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
fechas <- seq(from = ym("2023-11"), by = "months", length.out = meses_proyectar)
meses_proyectar<-24
fechas <- seq(from = ym("2023-11"), by = "months", length.out = meses_proyectar)
fechas_formato <- format(fechas, "%Y-%m")
gold_proyecciones<-data_frame(fechas_formato,
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
gold_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
gold$Future<-as.numeric(gold$Future)
gold_proyecciones<-data_frame(Date=fechas_formato,
Future=proyecciones_futuro_gold$mean,
Spot=proyecciones_spot_gold$mean )
gold_completo<-bind_rows(gold,gold_proyecciones)
#Se ponen las cosas como numeritos
gold$Future<-as.numeric(gold$Future)
silver$Future<-as.numeric(silver$Future)
copper$Future<-as.numeric(copper$Future)
platinum$Future<-as.numeric(platinum$Future)
gold_completo<-bind_rows(gold,gold_proyecciones)
View(gold_completo)
